@{
    ViewBag.Title = "Setup / Alarm Rule Catalog";
}

<div class="row">
    <div class="card-box table-responsive">
        <div style="float:left">
            <h4 class="header-title m-t-0 m-b-30">[[[Setup]]] / [[[Alarm Rule Catalog]]]</h4>
        </div>
        <div style="float:right">
            <button id="AddNewAlarmRuleCatalogButton" type="button" class="btn btn-inverse waves-effect waves-light m-b-5"> <i class="ti-plus m-r-5"></i> <span>[[[Add]]] [[[Alarm Rule Catalog]]]</span> </button>
        </div>
        <div class="col-sm-12">
            <table id="datatable-responsive" name="messageCatalogListTable" class="table table-striped table-bordered dt-responsive nowrap">
                <thead>
                    <tr>
                        <th>[[[No]]]</th>
                        <th>[[[Alarm]]] [[[Name]]]</th>
                        <th>[[[Description]]]</th>
                        <th>[[[On Message]]]</th>
                        <th>[[[Active]]]</th>
                    </tr>
                </thead>

                <tbody id="AlarmRuleCatalogList"></tbody>
            </table>
        </div>
    </div><!-- end col -->
</div>
<!-- end row -->

<div class="row" id="panel_detail" style="display:none;">
    <div class="panel-group" id="accordion" 2 role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingDetail" style="height: 60px;">
                <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseDetail" aria-expanded="true" aria-controls="collapseDetail">
                </a>
                <div style="float:left">
                    <h4 id="EditingPanelTitle" class="header-title m-t-0 m-b-30">[[[Detail]]]</h4>
                </div>
                <div style="float:right">
                    <button id="DeleteAlarmRuleCatalogButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px;"> <i class="ti-trash m-r-5"></i> <span>[[[Delete]]]</span> </button>
                    <button id="UpdateAlarmRuleCatalogButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px;"> <i class="ti-save m-r-5"></i> <span>[[[Save]]]</span> </button>
                    <button id="CancelAddNewAlarmRuleCatalogButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px; display:none"> <i class="ti-close m-r-5"></i> <span>[[[Cancel]]]</span> </button>
                    <button id="SubmitNewAlarmRuleCatalogButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px; display:none"> <i class="ti-location-arrow m-r-5"></i> <span>[[[Submit]]]</span> </button>
                    <button id="EditRuleButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:155px;"> <i class="ti-ruler-pencil m-r-5"></i> <span>[[[Edit]]] [[[Rule]]]</span> </button>
                    <button id="CancelEditRuleButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px; display:none"> <i class="ti-close m-r-5"></i> <span>[[[Cancel]]]</span> </button>
                    <button id="SubmitEditRuleButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px; display:none"> <i class="ti-location-arrow m-r-5"></i> <span>[[[Submit]]]</span> </button>
                 </div>
            </div>

            <div id="collapseDetail" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingDetail">
                <div class="panel-body">
                    <div class="col-sm-3">
                    </div>
                    <div class="row" style="margin-top: 10px;">
                        <div class="col-sm-2 text-left">
                        </div>
                        <div class="col-sm-10">
                            <form id="alarmRuleCatalog-form" class="form-horizontal" role="form" data-toggle="validator">
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label for="aName" class="col-sm-3 control-label">
                                            [[[Alarm]]] [[[Name]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <input id="aName" type="text" class="form-control" placeholder="[[[Name]]]" required>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="aDescription" class="col-sm-3 control-label">
                                            [[[Description]]]
                                        </label>
                                        <div class="col-sm-9">
                                            <textarea id="aDescription" class="form-control" rows="5"></textarea>
                                        </div>
                                    </div>                                    
                                    <div class="form-group">
                                        <label for="activeFlag" class="col-sm-3 control-label">
                                            [[[Active]]]
                                        </label>
                                        <div class="col-sm-9">
                                            <input id="activeFlag" type="checkbox" checked data-plugin="switchery" data-color="#00b19d" data-size="small" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label for="messageName" class="col-sm-3 control-label">
                                            [[[On Message]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <select id="messageName" class="form-control" required></select>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="aKeepHappenInSec" class="col-sm-3 control-label">
                                            [[[Aggregate Alarm Interval (Sec)]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <input id="aKeepHappenInSec" type="text" class="form-control" placeholder="[[[Default]]]: 60" required>
                                        </div>
                                    </div>
                                </div>                                
                            </form>
                        </div>
                        <div class="col-sm-3">
                        </div>
                    </div>
                </div>
            </div>


            <div class="row" id="panel-editrule" style="display:none;">
                <div class="panel-group" id="accordion" 2 role="tablist" aria-multiselectable="true">
                    <div class="panel panel-default">
                        
                        <div id="collapseDetail" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingDetail">
                            <div class="panel-body">
                                <table id="datatable-configuration" name="configurationListTable" class="table table-striped table-bordered dt-responsive nowrap">
                                    <thead>
                                        <tr>
                                            <th>[[[Field]]]</th>
                                            <th>[[[Condition]]]</th>
                                            <th>[[[Value]]]</th>
                                            <th></th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="RuleList"></tbody>

                                </table>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end row -->

<script type="text/javascript">

    var _alarmRuleCatalogJSONObjs = $.parseJSON(jsonStringFilter('@ViewBag.AlarmRuleCatalogList'));
    var _messageCatalogJSONObjs = $.parseJSON(jsonStringFilter('@ViewBag.MessageCatalogList'));
    var _messageElementJSONObjs;    
    var _ruleJSONObjs;
    var _conditionAllJSONObjs = [{ Id: "=", Name: "=" }, { Id: "!=", Name: "!=" }, { Id: ">", Name: ">" }, { Id: "<", Name: "<" }, { Id: "<=", Name: "<=" }, { Id: ">=", Name: ">=" }];
    var _condition2JSONObjs = [{ Id: "=", Name: "=" }, { Id: "!=", Name: "!=" }];
    var _bitWiseJSONObjs = [{ Id: "end", Name: "end" }, { Id: "XOR", Name: "XOR" }, { Id: "AND", Name: "AND" }, { Id: "OR", Name: "OR" }];
    var _boolJSONObjs = [{ Id: "true", Name: "true" }, { Id: "false", Name: "false" }];
    var _selectedAlarmRuleCatalogId = -1;
    var _selectedMessageCatalogId = -1;

    function LoadAlarmRuleCatalogListIntoTable() {

        var alarmRuleCatalogDataSet = $('#datatable-responsive').DataTable();
        var messageName;
        alarmRuleCatalogDataSet.clear().draw(false);
        for (var i in _alarmRuleCatalogJSONObjs) {
            for (var j in _messageCatalogJSONObjs) {
                if (_alarmRuleCatalogJSONObjs[i].MessageCatalogId == _messageCatalogJSONObjs[j].Id) {
                    messageName = _messageCatalogJSONObjs[j].Name;
                    break;
                }
            }
            alarmRuleCatalogDataSet.row.add([
                parseInt(i) + 1,
                _alarmRuleCatalogJSONObjs[i].Name,
                _alarmRuleCatalogJSONObjs[i].Description,
                messageName,
                (_alarmRuleCatalogJSONObjs[i].ActiveFlag ? '<i class="zmdi zmdi-circle text-success"></i> <span class="name"> Active</span>' : '<i class="zmdi zmdi-circle text-danger"></i> <span class="name"></span>')
            ]).draw(false);
        }
        alarmRuleCatalogDataSet.columns.adjust().draw();
    }

    function CleanFormInput() {
        $("#aName").val('');
        $('#aDescription').val('');
        $('#messageName').val('');
        $('#activeFlag').attr('checked', false);
        $('#aKeepHappenInSec').val('');
    }
    function ClearEditRuleTable() {
        var table = document.getElementById("datatable-configuration");
        if (table.rows.length != 1) {
            for (var i = table.rows.length; i > 1; i--) {
                table.deleteRow(i - 1);
            }
        }
    }
    function LoadMessageName() {
        var options = "<option disabled selected value> -- select a Message -- </option>";
        for (var i in _messageCatalogJSONObjs) {
                options += "<option value=" + _messageCatalogJSONObjs[i].Id + ">" + _messageCatalogJSONObjs[i].Name + "</option>"
        }
        document.getElementById("messageName").innerHTML = options;
    }

    function addNewRuleRow(rowNum) {
        var table = document.getElementById("datatable-configuration");
        var rowCount = table.rows.length;
        var row = table.insertRow(rowCount);
        //Criteria
        var cell = row.insertCell(-1);
        var element = document.createElement("select");
        var elementDataType;
        element.id = "criteria" + rowCount;
        element.setAttribute('onchange', 'ChangeCritera("' + element.id + '")');
        element.classList.add('form-control');
                
        for (var i = 0; i < _messageElementJSONObjs.length; i++) {
            var option = document.createElement("option");
            elementDataType = _messageElementJSONObjs[i].DataType;
            //no companyId in options && no DateTime in options
            if (_messageElementJSONObjs[i].Name != "companyId" && _messageElementJSONObjs[i].DataType != "datetime") {
                var displayName = _messageElementJSONObjs[i].Name + "(" + _messageElementJSONObjs[i].DataType + ")";
                console.log(_messageElementJSONObjs[i]);
                if (_messageElementJSONObjs[i].ParentId == null)
                    option.value = _messageElementJSONObjs[i].Id;
                else
                    option.value = _messageElementJSONObjs[i].ParentId + "_" + _messageElementJSONObjs[i].Id;

                option.text = displayName;
                element.appendChild(option);
            }

        }

        //Condition
        var cell2 = row.insertCell(-1);
        var element2 = document.createElement("select");
        element2.id = "condition" + rowCount;
        element2.classList.add('form-control');

        if (elementDataType == "numeric")
        {
            for (var i = 0; i < _conditionAllJSONObjs.length; i++) {
                var option = document.createElement("option");
                option.value = _conditionAllJSONObjs[i].Id;
                option.text = _conditionAllJSONObjs[i].Name;
                element2.appendChild(option);
            }
        }
        else
        {
            for (var i = 0; i < _condition2JSONObjs.length; i++) {
                var option = document.createElement("option");
                option.value = _condition2JSONObjs[i].Id;
                option.text = _condition2JSONObjs[i].Name;
                element2.appendChild(option);
            }
        }

        //Value
        var cell3 = row.insertCell(-1);
        var element3 = document.createElement("input");
        element3.type = "text";
        element3.value = "";
        element3.id = "value" + rowCount;
        element3.classList.add('form-control');

        //BitWise
        var cell4 = row.insertCell(-1);
        var element4 = document.createElement("select");
        element4.id = "bitwise" + rowCount;
        element4.setAttribute('onchange', 'ChangeBitWise("' + element4.id + '")');
        element4.classList.add('form-control');
        for (var i = 0; i < _bitWiseJSONObjs.length; i++) {
            var option = document.createElement("option");
            option.value = _bitWiseJSONObjs[i].Id;
            option.text = _bitWiseJSONObjs[i].Name;
            element4.appendChild(option);
        }

        //deletebutton
        var cell5 = row.insertCell(-1);
        var element5 = document.createElement("button");
        element5.id = rowCount;
        element5.textContent = "Delete";
        element5.classList.add('btn');
        element5.classList.add('btn-inverse');
        element5.classList.add('waves-effect');
        element5.classList.add('waves-light');
        element5.classList.add('m-b-5');
        element5.setAttribute('onclick', 'DeleteRow("' + element5.id + '")');

        //add new row
        cell.appendChild(element);
        cell2.appendChild(element2);
        cell3.appendChild(element3);
        cell4.appendChild(element4);
        if (rowCount != 1) cell5.appendChild(element5);
        $(element).change();


        if (rowNum != null) {
            //option value may be 12_15 or 32
            if (_ruleJSONObjs[rowNum].MessageElementParentId == null)
                element.value = _ruleJSONObjs[rowNum].MessageElementId;
            else
                element.value = _ruleJSONObjs[rowNum].MessageElementParentId + '_' + _ruleJSONObjs[rowNum].MessageElementId;

            $(element).change();
            $('#' + element2.id).val(_ruleJSONObjs[rowNum].EqualOperation);
            document.getElementById("value" + rowCount).value = _ruleJSONObjs[rowNum].Value;
            element4.value = _ruleJSONObjs[rowNum].BitWiseOperation;
            if (element4.value != "end") element4.removeChild(element4.options[0]);
        }
    }

    function DeleteRow(id) {
        var table = document.getElementById("datatable-configuration");
        var rowCount = table.rows.length;
        table.deleteRow(id);
        //Re-assign element id
        for (var i = id; i < rowCount-1 ; i++) {
            var nexti = (parseInt(i) + 1);
            document.getElementById("criteria" + nexti).id = "criteria" + i;
            document.getElementById("condition" + nexti).id = "condition" + i;
            document.getElementById("value" + nexti).id = "value" + i;
            document.getElementById("bitwise" + nexti).id = "bitwise" + i;

        }
        var bitWiseElement = document.getElementById("bitwise" + (parseInt(rowCount) - 2));
        while (bitWiseElement.firstChild) {
            bitWiseElement.removeChild(bitWiseElement.firstChild);
        }
        for (var i = 0; i < _bitWiseJSONObjs.length; i++) {
            var option = document.createElement("option");
            option.value = _bitWiseJSONObjs[i].Id;
            option.text = _bitWiseJSONObjs[i].Name;
            bitWiseElement.appendChild(option);
        }

        bitWiseElement.value = "end";

    }
    function ChangeBitWise(id) {
        var table = document.getElementById("datatable-configuration");
        var rowCount = table.rows.length;
        var bitwise = document.getElementById(id);
        var v = id.split("bitwise");

        if ((bitwise != "end")&&((rowCount-1)==v[1])) { //lastRow
            addNewRuleRow();
            for (var i = 0; i < bitwise.options.length; i++) {
                if (bitwise.options[i].value == "end") bitwise.removeChild(bitwise.options[i]);
            }

        }

    }
    function ChangeCritera(id) {
        var criteria = document.getElementById(id).value;
        var v = id.split("criteria");
        var x = document.getElementById("value" + v[1]);

        for (var i in _messageElementJSONObjs) {
            if (_messageElementJSONObjs[i].Id == criteria) {
                //Change input type when DataType is different
                if (_messageElementJSONObjs[i].DataType == "bool") {
                    var element = document.createElement("select");
                    element.id = "value" + v[1];
                    element.classList.add('form-control');
                    for (var i = 0; i < _boolJSONObjs.length; i++) {
                        var option = document.createElement("option");
                        option.value = _boolJSONObjs[i].Id;
                        option.text = _boolJSONObjs[i].Name;
                        element.appendChild(option);
                    }
                    x.parentNode.replaceChild(element, x);

                    //Condition
                    var element2 = document.createElement("select");
                    element2.id = "condition" + v[1];
                    element2.classList.add('form-control');
                    for (var i = 0; i < _condition2JSONObjs.length; i++) {
                        var option = document.createElement("option");
                        option.value = _condition2JSONObjs[i].Id;
                        option.text = _condition2JSONObjs[i].Name;
                        element2.appendChild(option);
                    }
                    var x2 = document.getElementById("condition" + v[1]);
                    x2.parentNode.replaceChild(element2, x2);

                }
                else if (_messageElementJSONObjs[i].DataType == "string"){
                    var element = document.createElement("input");
                    element.id = "value" + v[1];
                    element.type = "text";
                    element.classList.add('form-control');
                    element.placeholder = "Please input string";
                    x.parentNode.replaceChild(element, x);

                    //Condition
                    var element2 = document.createElement("select");
                    element2.id = "condition" + v[1];
                    element2.classList.add('form-control');
                    for (var i = 0; i < _condition2JSONObjs.length; i++) {
                        var option = document.createElement("option");
                        option.value = _condition2JSONObjs[i].Id;
                        option.text = _condition2JSONObjs[i].Name;
                        element2.appendChild(option);
                    }
                    var x2 = document.getElementById("condition" + v[1]);
                    x2.parentNode.replaceChild(element2, x2);
                }
                else if (_messageElementJSONObjs[i].DataType == "numeric") {
                    var element = document.createElement("input");
                    element.id = "value" + v[1];
                    element.type = "number";
                    element.classList.add('form-control');
                    element.placeholder = "Please input number";

                    x.parentNode.replaceChild(element, x);

                    //Condition
                    var element2 = document.createElement("select");
                    element2.id = "condition" + v[1];
                    element2.classList.add('form-control');
                    for (var i = 0; i < _conditionAllJSONObjs.length; i++) {
                        var option = document.createElement("option");
                        option.value = _conditionAllJSONObjs[i].Id;
                        option.text = _conditionAllJSONObjs[i].Name;
                        element2.appendChild(option);
                    }
                    var x2 = document.getElementById("condition" + v[1]);
                    x2.parentNode.replaceChild(element2, x2);
                }
                //else if (_messageElementJSONObjs[i].DataType == "datetime") {
                //    var element = document.createElement("input");
                //    element.id = "value" + v[1];
                //    element.type = "text";
                //    element.placeholder = "mm/dd/yyyy";
                //    $(element).datepicker();
                //    x.parentNode.replaceChild(element, x);
                //}
                //else if (_messageElementJSONObjs[i].DataType == "message") {
                //    var element = document.createElement("input");
                //    element.id = "value" + v[1];
                //    element.type = "text";
                //    element.placeholder = "Please input message";
                //    x.parentNode.replaceChild(element, x);
                //}
                break;
            }

        }
    }

    function RefreshAlarmRuleCatalogTable() {
        $.ajax({
            type: "POST",
            url: "/Setup/ReqAction?action=getalarmrulecatalog" + "&t=" + Date.now(),
            data: null,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                _alarmRuleCatalogJSONObjs = $.parseJSON(jsonStringFilter(data));
                LoadAlarmRuleCatalogListIntoTable();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });
    }


    function OnSelectAlarmRuleCatalogItem(alarmRuleCatalogId) {
        $('#panel_detail').css("display", "block");
        $('#EditingPanelTitle').html("[[[Detail]]]");
        _selectedAlarmRuleCatalogId = alarmRuleCatalogId;
        CleanFormInput();
        for (var i in _alarmRuleCatalogJSONObjs) {
            if (_alarmRuleCatalogJSONObjs[i].Id == _selectedAlarmRuleCatalogId) {
                $('#aName').val(_alarmRuleCatalogJSONObjs[i].Name);
                $('#aDescription').val(_alarmRuleCatalogJSONObjs[i].Description);
                $('#messageName').val(_alarmRuleCatalogJSONObjs[i].MessageCatalogId);
                _selectedMessageCatalogId = _alarmRuleCatalogJSONObjs[i].MessageCatalogId;
                $('#activeFlag').prop('checked', eval(_alarmRuleCatalogJSONObjs[i].ActiveFlag));
                $('#aKeepHappenInSec').val(_alarmRuleCatalogJSONObjs[i].KeepHappenInSec);

                break;
            }
        }
    }

    function DoAlarmRuleCatalogTransactionAjax(actionName, Id, postData) {
        var endPoint = "/Setup/ReqAction?action=" + actionName;
        if (Id >= 0)
            endPoint = endPoint + "&Id=" + Id;
        $.ajax({
            type: "POST",
            url: endPoint + "&t=" + Date.now(),
            data: postData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                RefreshAlarmRuleCatalogTable();
                _selectedAlarmRuleCatalogId = -1;
                toastr["success"]("[[[Action Completed]]]. (" + data + ")");
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });
    }

    function GetRule(alarmRuleCatalogId) {
        console.log("/Setup/ReqAction?action=getrulebyid&Id=" + alarmRuleCatalogId + "&t=" + Date.now());
        $.ajax({
            type: "POST",
            url: "/Setup/ReqAction?action=getrulebyid&Id=" + alarmRuleCatalogId + "&t=" + Date.now(),
            data: null,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                console.log("111111111");
                _ruleJSONObjs = $.parseJSON(jsonStringFilter(data));
                console.log(_ruleJSONObjs);
                if (data=="[]") addNewRuleRow();
                for (var i = 0; i < _ruleJSONObjs.length;i++) {
                    addNewRuleRow(i);

                }

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log("222222222");
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });
    }
    function GetMessageElement(messageCatalogId) {
        $.ajax({
            type: "POST",
            url: "/Setup/ReqAction?action=getmessageflatelement&Id=" + messageCatalogId + "&t=" + Date.now(),
            data: null,
            cache: false,
            contentType: false,
            processData: false,
            async: false,
            success: function (data) {
                _messageElementJSONObjs = $.parseJSON(jsonStringFilter(data));
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });
    }

    TableManageButtons.init();

    LoadAlarmRuleCatalogListIntoTable();
    LoadMessageName();

    $(document).ready(function () {
        var table = $('#datatable-responsive').DataTable();
        $('#datatable-responsive #AlarmRuleCatalogList').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            }
            else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
            OnSelectAlarmRuleCatalogItem(_alarmRuleCatalogJSONObjs[table.row(this).index()].Id);
            SwitchToDetail();
        });


        function dataValidation(postData) {
            if ($("#aName").val().length != 0) {
                postData.append('Name', $("#aName").val());
            } else {
                $("#aName").focus();
                swal("[[[Invalid]]] !", "[[[Name is necessary]]].");
                return {
                    postData: postData,
                    isValidated: false
                };
            }

            if ($('#aKeepHappenInSec').val().length != 0)
            {
                if (!isNaN($('#aKeepHappenInSec').val()) && $('#aKeepHappenInSec').val() >= 0 && $('#aKeepHappenInSec').val()<=600)
                {                   
                    postData.append('KeepHappenInSec', $('#aKeepHappenInSec').val());
                }
                else
                {
                    $("#aKeepHappenInSec").focus();
                    swal("[[[Invalid]]] !", "Must be a number >=0 and <= 600.");
                    return {
                        postData: postData,
                        isValidated: false
                    };
                }
            }
            else
            {
                postData.append('KeepHappenInSec', '60');
            }

            //if (sfIsJson($("#MsgTemplate").val())) {
            //    postData.append('MessageTemplate', $("#MsgTemplate").val());
            //} else {
            //    $("#MsgTemplate").focus();
            //    swal("Invalid !", "Not an valid JSON Content.");
            //    return {
            //        postData: postData,
            //        isValidated: false
            //    };
            //}

            postData.append('Description', $("#aDescription").val());
            postData.append('MessageCatalogId', $("#messageName").val());
            postData.append('ActiveFlag', $("#activeFlag").is(":checked") ? true : false);            

            return {
                postData: postData,
                isValidated: true
            }
        }

        function SwitchToDetail() {
            $('#EditingPanelTitle').html("[[[Detail]]]");
            $('#EditRuleButton').css("display", "inline");

            $('#DeleteAlarmRuleCatalogButton').css("display", "inline");
            $('#UpdateAlarmRuleCatalogButton').css("display", "inline");
            $('#AddNewAlarmRuleCatalogButton').css("display", "inline");
            $('#CancelAddNewAlarmRuleCatalogButton').css("display", "none");
            $('#SubmitNewAlarmRuleCatalogButton').css("display", "none");

            $('#collapseDetail').css("display", "inline");

            $('#panel-editrule').css("display", "none");
            $('#CancelEditRuleButton').css("display", "none");
            $('#SubmitEditRuleButton').css("display", "none");

        }

        $('#AddNewAlarmRuleCatalogButton').click(function () {
            $('#panel_detail').css("display", "block");

            $('#EditingPanelTitle').html("[[[Add New]]] [[[Alarm Rule Catalog]]]");
            $('#DeleteAlarmRuleCatalogButton').css("display", "none");
            $('#UpdateAlarmRuleCatalogButton').css("display", "none");
            $('#CancelAddNewAlarmRuleCatalogButton').css("display", "inline");

            $('#SubmitNewAlarmRuleCatalogButton').css("display", "inline");

            $('#AddNewAlarmRuleCatalogButton').css("display", "none");
            $('#EditRuleButton').css("display", "none");
            $('#panel-editrule').css("display", "none");
            $('#CancelEditRuleButton').css("display", "none");
            $('#SubmitEditRuleButton').css("display", "none");
            CleanFormInput();
            $("#aName").focus();
        });


        $('#CancelAddNewAlarmRuleCatalogButton').click(function () {
            $('#panel_detail').css("display", "none");
            $('#panel-editrule').css("display", "none");
            CleanFormInput();
            window.scrollTo(0, 0);
        });

        $('#SubmitNewAlarmRuleCatalogButton').click(function () {
            var postData = new FormData();
            var result = dataValidation(postData);

            if (result.isValidated) {
                swal({
                    title: "[[[Are you sure]]]?",
                    text: "",
                    type: "success",
                    showCancelButton: true,
                    confirmButtonClass: 'btn-success waves-effect waves-light',
                    confirmButtonText: '[[[Submit]]]!'
                }, function (isConfirm) {
                    if (isConfirm) {
                        DoAlarmRuleCatalogTransactionAjax("addalarmRuleCatalog", -1, result.postData);

                        $('#panel_detail').css("display", "none");
                        $('#EditingPanelTitle').html("[[[Detail]]]");
                        $('#DeleteAlarmRuleCatalogButton').css("display", "inline");
                        $('#UpdateAlarmRuleCatalogButton').css("display", "inline");
                        $('#CancelAddNewAlarmRuleCatalogButton').css("display", "none");
                        $('#SubmitNewAlarmRuleCatalogButton').css("display", "none");

                        $('#AddNewAlarmRuleCatalogButton').css("display", "inline");

                        CleanFormInput();
                        window.scrollTo(0, 0);
                    }
                });
            }
        });

        $('#DeleteAlarmRuleCatalogButton').click(function () {
            if (_selectedAlarmRuleCatalogId < 0)
                toastr["error"]("[[[No Alarm Rule Catalog Select]]].");
            else {
                swal({
                    title: "[[[Are you sure]]]?",
                    text: "",
                    type: "error",
                    showCancelButton: true,
                    confirmButtonClass: 'btn-danger waves-effect waves-light',
                    confirmButtonText: '[[[Delete]]]!'
                }, function (isConfirm) {
                    if (isConfirm) {
                        DoAlarmRuleCatalogTransactionAjax("deleteAlarmRuleCatalog", _selectedAlarmRuleCatalogId, null);
                        CleanFormInput();
                        $('#panel_detail').css("display", "none");
                        window.scrollTo(0, 0);
                    }
                });
            }
        });

        $('#UpdateAlarmRuleCatalogButton').click(function () {
            if (_selectedAlarmRuleCatalogId < 0)
                toastr["error"]("[[[No Alarm Rule Catalog Select]]].");
            else {
                var postData = new FormData();
                var result = dataValidation(postData);

                if(result.isValidated){
                    swal({
                        title: "[[[Are you sure]]]?",
                        text: "",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonClass: 'btn-warning waves-effect waves-light',
                        confirmButtonText: '[[[Update]]]!'
                    }, function (isConfirm) {
                        if (isConfirm) {
                            DoAlarmRuleCatalogTransactionAjax("updateAlarmRuleCatalog", _selectedAlarmRuleCatalogId, result.postData);
                            $('#panel_detail').css("display", "none");
                        }
                    });
                }
            }
        });

        $("#EditRuleButton").click(function () {
            $('#EditingPanelTitle').html("[[[Edit]]] [[[Rule]]]");
            $('#EditRuleButton').css("display", "none");
            $('#DeleteAlarmRuleCatalogButton').css("display", "none");
            $('#UpdateAlarmRuleCatalogButton').css("display", "none");
            $('#AddNewAlarmRuleCatalogButton').css("display", "none");
            $('#CancelAddNewAlarmRuleCatalogButton').css("display", "none");
            $('#SubmitNewAlarmRuleCatalogButton').css("display", "none");
            $('#collapseDetail').css("display", "none");
            $('#panel-editrule').css("display", "inline");
            $('#CancelEditRuleButton').css("display", "inline");
            $('#SubmitEditRuleButton').css("display", "inline");
            ClearEditRuleTable();
            GetMessageElement(_selectedMessageCatalogId);
            GetRule(_selectedAlarmRuleCatalogId);

        });       

        $("#CancelEditRuleButton").click(function () {
            SwitchToDetail();
        });

        $("#SubmitEditRuleButton").click(function () {
            var table = document.getElementById("datatable-configuration");
            var rowCount = table.rows.length;
            var AlarmRules = [];
            if (_selectedAlarmRuleCatalogId < 0) {
                toastr["error"]("[[[No Alarm Rule Catalog Select]]].");
                return;
            }
            var postFullData = new FormData();
            var postData = new FormData();
            if (rowCount == 1) postData.append("AlarmRules[]", "[]");
            else {
                for (var i = 1; i < rowCount; i++) {
                    var x = i - 1;
                    var inputValue;

                    //Source messageElementId maybe 12_45 or 45
                    var combinationMessageElementId = document.getElementById("criteria" + i).value;
                    var messageElementId, messageElementParentId;
                    if (combinationMessageElementId.indexOf('_') > -1)
                    {
                        var strArrary = combinationMessageElementId.split('_');
                        messageElementParentId = strArrary[0];
                        messageElementId = strArrary[1];
                    }
                    else
                    {
                        messageElementParentId = null;
                        messageElementId = combinationMessageElementId;
                    }

                    if (document.getElementById("value" + i).value.length == 0)
                    {
                        for (var j = 0; j < _messageElementJSONObjs.length; j++) {
                            if (_messageElementJSONObjs[j].Id == messageElementId ) {
                                if (_messageElementJSONObjs[j].DataType == 'string')
                                    inputValue = 'null';
                                else if (_messageElementJSONObjs[j].DataType == 'numeric')
                                    inputValue = '0';
                                else if (_messageElementJSONObjs[j].DataType == 'numeric')
                                    inputValue = 'true';
                                break;
                            }
                        }
                    }
                    else
                    {
                        inputValue = document.getElementById("value" + i).value;
                    }
                    postData.append("AlarmRules[" + x + "][Ordering]", i);                    
                    postData.append("AlarmRules[" + x + "][MessageElementId]", messageElementId);
                    postData.append("AlarmRules[" + x + "][EqualOperation]", document.getElementById("condition" + i).value);
                    postData.append("AlarmRules[" + x + "][Value]", inputValue);
                    postData.append("AlarmRules[" + x + "][BitWiseOperation]", document.getElementById("bitwise" + i).value);

                    if (messageElementParentId != null)
                        postData.append("AlarmRules[" + x + "][MessageElementParentId]", messageElementParentId);
                }
            }


            swal({
                title: "[[[Are you sure]]]?",
                text: "",
                type: "success",
                showCancelButton: true,
                confirmButtonClass: 'btn-success waves-effect waves-light',
                confirmButtonText: '[[[Submit]]]!'
            }, function (isConfirm) {
                if (isConfirm) {
                    DoAlarmRuleCatalogTransactionAjax("changerules", _selectedAlarmRuleCatalogId, postData);
                    $('#panel_detail').css("display", "none");
                    $('#panel-editrule').css("display", "none");
                    window.scrollTo(0, 0);
                }
            });
        });
    });
</script>


