@{
    ViewBag.Title = "Monitor / IoT Hub Receiver";
}

<!-- SignalR -->
<script src="/Scripts/jquery.signalR-2.2.1.js"></script>
<script src="/signalr/hubs"></script>

<script type="text/javascript">
    $(function () {
        var hub = $.connection.RTMessageHub;
        hub.client.onReceivedMessage = function (message) {
            var HeartbeatMessage = $.parseJSON(message);
            if (HeartbeatMessage.topic == 'IoTHubEventProcessor Heartbeat')
            {
                UpdateIoTHubReceiver(HeartbeatMessage.iotHubAlias, HeartbeatMessage);
            }
        };

        $.connection.hub.start().done(function () {
            hub.server.register("@ViewBag.CompanyId");
        });
    })
</script>

<div class="row">
    <div class="card-box table-responsive">
        <div style="float:left">
            <h4 class="header-title m-t-0 m-b-30">[[[Monitor]]] / [[[IoT Hub]]] [[[Receiver]]]</h4>
        </div>        
        <div class="col-sm-12">
            <table id="datatable-responsive" name="iotHubReceiverListTable" class="table table-striped table-bordered dt-responsive nowrap">
                <thead>
                    <tr>
                        <th>[[[No]]]</th>
                        <th>[[[IoT Hub Alias]]]</th>
                        <th>[[[Status]]]</th>
                        <th>[[[Node]]]</th>
                        <th>[[[Last Updated]]]</th>
                        <th>[[[Action]]]</th>
                    </tr>
                </thead>

                <tbody id="IoTHubReceiverList"></tbody>
            </table>
        </div>
    </div><!-- end col -->
</div>
<!-- end row -->

<script type="text/javascript">
    var _iotHubJSONObjs = $.parseJSON(jsonStringFilter('@ViewBag.IoTHubList'));
    var _iotHubDataSet;
    var _permissions = [@ViewBag.PermissionList];
    var _showChecking = ' [[[Checking]]]... ';
    var _showShutdown = '<i class="zmdi zmdi-circle text-muted"></i> <span class="name"> [[[Shutdown]]] </span>';
    var _showRunning = '<i class="zmdi zmdi-circle text-success"></i> <span class="name"> [[[Running]]] </span>';
    var _showStop = '<button class="btn btn-warning disabled btn-xs m-b-5"> [[[Stop]]] </button>';

    function LoadIoTHubListIntoTable() {
        _iotHubDataSet = $('#datatable-responsive').DataTable();
        var DTNow = new Date();

        for (var i in _iotHubJSONObjs) {
            _iotHubDataSet.row.add([
                parseInt(i) + 1,
                _iotHubJSONObjs[i].IoTHubAlias,
                _showChecking,
                _showChecking,
                sfDateToString(DTNow),
                "",
            ]).draw(false);
        }
        _iotHubDataSet.columns.adjust().draw();
    }

    LoadIoTHubListIntoTable();

    function CheckIoTReceiverShutdown() {
        var nowDT = new Date();
        for (var i = 0; i < _iotHubDataSet.rows().count(); i++)
        {
            var lastUpdated = sfStringToDate(_iotHubDataSet.cell(i, 4).data());
            var difInSec = (nowDT.getTime() - lastUpdated.getTime()) / 1000;
            if (difInSec > 15)
            {
                var newData = [
                    _iotHubDataSet.cell(i, 0).data(),
                    _iotHubDataSet.cell(i, 1).data(),
                    _showShutdown,
                    '',
                    sfDateToString(nowDT),
                    '<button type="button" class="btn btn-success waves-effect w-md waves-light m-b-5" onclick="doAction(1,' + i + ');"> [[[Launch]]] </button>'];

                UpdateDataTableByRowId(i, newData);
            }
        }
    }

    function UpdateIoTHubReceiver(IoTHubAlias, HeartbeatMessage)
    {
        var nowDT = new Date();
        for (var i = 0; i < _iotHubDataSet.rows().count(); i++)
        {
            if (_iotHubDataSet.cell(i, 1).data() == IoTHubAlias)
            {
                var status = '', action = '';
                if (HeartbeatMessage.status == 'Running' || HeartbeatMessage.status == 'Stop')
                {
                    status = _showRunning;
                    action = '<button type="button" class="btn btn-warning waves-effect w-md waves-light m-b-5" onclick="doAction(3,' + i + ');"> Restart </button>';
                }
                var newData = [
                    _iotHubDataSet.cell(i, 0).data(),
                    _iotHubDataSet.cell(i, 1).data(),
                    status,
                    HeartbeatMessage.iotHubNode,
                    sfDateToString(nowDT),
                    action];

                UpdateDataTableByRowId(i, newData);
                break;
            }
        }
    }

    function UpdateDataTableByRowId(rowID, newData)
    {
        var currentPageNum = _iotHubDataSet.page.info().page;
        _iotHubDataSet.row(rowID).data(newData).page(currentPageNum).draw('page'); 
        //_iotHubDataSet.row(rowID).data(newData).draw(false);
    }

    function doAction(commandNo, IoTHubAliasNo)
    {
        var sActionName;
        switch(commandNo) {
            case 1:
                sActionName = "Launch IoTHub Receiver";
                break;
            case 3:
                sActionName = "Restart IoTHub Receiver";
                break;          
            default:
                return;
        }

        var endPoint = "/Monitor/ReqAction?mAction=IoTHubReceiver" + "&sAction=" + sActionName;
        var postData = new FormData();
        postData.append('IoTHubAlias', _iotHubDataSet.cell(IoTHubAliasNo, 1).data());

        $.ajax({
            type: "POST",
            url: endPoint + "&t=" + Date.now(),
            data: postData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                toastr["success"]("[[[Action Completed]]]. (" + data + ")");
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });
    }

    $(document).ready(function () {
        setInterval(function () { CheckIoTReceiverShutdown() }, 15000);

    });
</script>