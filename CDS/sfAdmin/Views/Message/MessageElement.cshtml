@{
    ViewBag.Title = "Message / Message Element";
}

<div class="row">
    <div class="card-box table-responsive">
        <div style="float:left">
            <h4 class="header-title m-t-0 m-b-30">[[[Message]]] / [[[Message Element]]]</h4>
        </div>
        <div class="col-sm-12">
            <table id="datatable-responsive" name="messageCatalogListTable" class="table table-striped table-bordered dt-responsive nowrap">
                <thead>
                    <tr>
                        <th>[[[No]]]</th>
                        <th>[[[Name]]]</th>
                        <th>[[[Description]]]</th>
                        <th>[[[Master Message]]]</th>
                    </tr>
                </thead>

                <tbody id="MessageCatalogList"></tbody>
            </table>
        </div>
    </div><!-- end col -->
</div>
<!-- end row -->
<div class="row">
    <div class="panel-group" id="accordionElement" 2 role="tablist" aria-multiselectable="true">
        <div class="panel panel-default" id="element" style="display:none;">
            <div class="panel-heading" role="tab" id="headingElement" style="height: 60px;">
                <a role="button" data-toggle="collapse" data-parent="#accordionElement" href="#collapseElement" aria-expanded="true" aria-controls="collapseElement">
                </a>
                <div style="float:left">
                    <h4 class="header-title m-t-0 m-b-30">[[[Edit]]] [[[Element]]]</h4>
                </div>
                <div style="float:right">
                    <button id="AddNewMessageElementButton" type="button" class="btn btn-inverse waves-effect waves-light m-b-5"> <i class="ti-plus m-r-5"></i> <span>[[[Add]]] [[[Element]]]</span> </button>
                </div>
            </div>

            <div id="collapseElement" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingElement">
                <div class="panel-body">
                    <table id="elementListTable" class="table table-striped table-bordered dt-responsive nowrap">
                        <thead>
                            <tr>
                                <th>[[[No]]]</th>
                                <th>[[[Name]]]</th>
                                <th>[[[Data Type]]]</th>
                                <th>[[[Mandatory]]]</th>
                                <th>[[[Child Message]]]</th>

                            </tr>
                        </thead>

                        <tbody id="ElementList"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end row -->

<div class="row" id="panel_detail" style="display:none;">
    <div class="panel-group" id="accordion" 2 role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingDetail" style="height: 60px;">
                <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseDetail" aria-expanded="true" aria-controls="collapseDetail">
                </a>
                <div style="float:left">
                    <h4 id="EditingPanelTitle" class="header-title m-t-0 m-b-30">Detail</h4>
                </div>
                <div style="float:right">
                    <button id="DeleteMessageElementButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px;"> <i class="ti-trash m-r-5"></i> <span>[[[Delete]]]</span> </button>
                    <button id="UpdateMessageElementButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px;"> <i class="ti-save m-r-5"></i> <span>[[[Save]]]</span> </button>
                    <button id="CancelAddNewMessageElementButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px; display:none"> <i class="ti-close m-r-5"></i> <span>[[[Cancel]]]</span> </button>
                    <button id="SubmitNewMessageElementButton" class="btn btn-inverse waves-effect waves-light m-b-5" style="width:92px; display:none"> <i class="ti-location-arrow m-r-5"></i> <span>[[[Submit]]]</span> </button>
                </div>
            </div>

            <div id="collapseDetail" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingDetail">
                <div class="panel-body">
                    <div class="col-sm-3">
                    </div>
                    <div class="row" style="margin-top: 10px;">
                        <div class="col-sm-2 text-left">
                            <img id="ePhotoURL" src="/assets/images/default/Message.png" class="img-responsive" alt="Logo" style="max-width: 200px; height: inherit; padding-bottom: 15px;">
                        </div>
                        <div class="col-sm-10">
                            <form id="messageCatalog-form" class="form-horizontal" role="form" data-toggle="validator">
                                <div class="col-sm-9">
                                    <div class="form-group">
                                        <label for="inputName" class="col-sm-3 control-label">
                                            [[[Element]]] [[[Name]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <input id="eleName" type="text" class="form-control" placeholder="[[[Name]]]" required>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="inputElementDataType" class="col-sm-3 control-label">
                                            [[[Data Type]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <select id="eleDataType" class="form-control">
                                                <option value="bool" selected="selected">[[[bool]]]</option>
                                                <option value="string">[[[string]]]</option>
                                                <option value="numeric">[[[numeric]]]</option>
                                                <option value="datetime">[[[datetime]]]</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="inputElementMandatory" class="col-sm-3 control-label">
                                            [[[Mandatory]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <select id="eleMandatory" class="form-control">
                                                <option value="true" selected="selected">[[[true]]]</option>
                                                <option value="false">[[[false]]]</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group" id="childMessageBlock" style="display:none">
                                        <label for="inputElementChildMessage" class="col-sm-3 control-label">
                                            [[[Child Message]]](*)
                                        </label>
                                        <div class="col-sm-9">
                                            <select id="eleChildMessage" class="form-control"> </select>
                                        </div>
                                    </div>
                                </div>                                
                            </form>
                        </div>
                        <div class="col-sm-5">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end row -->

<script type="text/javascript">

    var _messageCatalogJSONObjs = $.parseJSON(jsonStringFilter('@ViewBag.MessageCatalogList'));
    var _messageElementJSONObjs;
    var _selectedMessageCatalogId = -1;
    var _selectedMessageElementId = -1;
    var _selectedMessageCatalogChildMessageFlag = true;
    var childMessage = [];
    var _permissions = [@ViewBag.PermissionList];


    function LoadMessageCatalogListIntoTable() {

        var messageCatalogDataSet = $('#datatable-responsive').DataTable();
        messageCatalogDataSet.clear().draw(false);

        for (var i in _messageCatalogJSONObjs) {
            messageCatalogDataSet.row.add([
                parseInt(i) + 1,
                _messageCatalogJSONObjs[i].Name,
                _messageCatalogJSONObjs[i].Description,
                (_messageCatalogJSONObjs[i].ChildMessageFlag ? '' : '<i class="zmdi zmdi-circle text-success"></i> <span class="name"> Master</span>')
            ]).draw(false);
        }
        messageCatalogDataSet.columns.adjust().draw();
    }
    function LoadMessageElementListIntoTable() {

        var messageElementDataSet = $('#elementListTable').DataTable();
        messageElementDataSet.clear().draw(false);
        //load child message if DataType is message
        for (var i in _messageElementJSONObjs) {
            if (_messageElementJSONObjs[i].ElementDataType == "message") childMessage.push(getChildMessageById(_messageElementJSONObjs[i].ChildMessageCatalogID));
            else childMessage.push("");
        }
        //Load Element into table
        for (var i in _messageElementJSONObjs) {
            messageElementDataSet.row.add([
                parseInt(i) + 1,
                _messageElementJSONObjs[i].ElementName,
                _messageElementJSONObjs[i].ElementDataType,
                (_messageElementJSONObjs[i].MandatoryFlag ? '<i class="zmdi zmdi-circle text-success"></i> <span class="name"> Mandatory</span>' : ''),
                childMessage[i]
            ]).draw(false);
        }
        messageElementDataSet.columns.adjust().draw();
        childMessage = [];

    }
    function LoadChildMessageObjects() {
        for (var i in _messageCatalogJSONObjs) {
            if (_messageCatalogJSONObjs[i].ChildMessageFlag==true)
                $("#eleChildMessage").append("<option value='" + _messageCatalogJSONObjs[i].Id + "'>" + _messageCatalogJSONObjs[i].Name + "</option>");

        }
    }
    function LoadMessageDataType() {
        $("#eleDataType option[value='message']").remove();
        if (_selectedMessageCatalogChildMessageFlag == false)
                $("#eleDataType").append("<option value='message'>[[[message]]]</option>");
    }

    function CleanFormInput() {
        $("#eleName").val('');
        $('#eleDataType').val('string');
        $('#eleMandatory').val('true');
        $('#eleChildMessage').empty();
        LoadChildMessageObjects();
        LoadMessageDataType();
        $('#eleDataType').change();

    }

    function OnSelectMessageCatalogItem(messageCatalogId, messageCatalogChildMessageFlag) {
        $('#element').css("display", "block");
        $('#panel_detail').css("display", "none");
        _selectedMessageCatalogId = messageCatalogId;
        _selectedMessageCatalogChildMessageFlag = messageCatalogChildMessageFlag;
        DoMessageElementTransactionAjax("getmessageelementbyid", _selectedMessageCatalogId, null);

    }
    function OnSelectMessageElementItem(messageElementId) {
        $('#panel_detail').css("display", "block");
        $('#EditingPanelTitle').html("[[[Detail]]]");
        _selectedMessageElementId = messageElementId;
        CleanFormInput();
        for (var i in _messageElementJSONObjs) {
            if (_messageElementJSONObjs[i].Id == _selectedMessageElementId) {
                $('#eleName').val(_messageElementJSONObjs[i].ElementName);
                $('#eleDataType').val(_messageElementJSONObjs[i].ElementDataType);
                $('#eleDataType').change();
                $('#eleMandatory').val(String(_messageElementJSONObjs[i].MandatoryFlag));
                $('#eleChildMessage').val(_messageElementJSONObjs[i].ChildMessageCatalogID);
                if (_messageElementJSONObjs[i].SFMandatoryFlag == true) {
                    $('#DeleteMessageElementButton').css("display", "none");
                    $('#UpdateMessageElementButton').css("display", "none");
                }
                else {
                    $('#DeleteMessageElementButton').css("display", "inline");
                    $('#UpdateMessageElementButton').css("display", "inline");
                }
                break;
            }
        }

    }


    function getChildMessageById(Id) {
        var endPoint = "/Message/ReqAction?action=getchildmessagebyid";
        var result;
        if (Id != 0)
            endPoint = endPoint + "&Id=" + Id;
        $.ajax({
            type: "GET",
            url: endPoint + "&t=" + Date.now(),
            async: false,
            success: function (data) {
                    JSONdata = JSON.parse(data);
                    result = JSONdata.Name;
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });

        return result;
    }

    function DoMessageElementTransactionAjax(actionName, Id, postData) {
        var endPoint = "/Message/ReqAction?action=" + actionName;
        if (postData != null) postData.append('MessageCatalogID', _selectedMessageCatalogId);

        if (Id != -1)
            endPoint = endPoint + "&Id=" + Id;
        $.ajax({
            type: "POST",
            url: endPoint + "&t=" + Date.now(),
            data: postData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                switch (actionName) {
                    case "getmessageelementbyid":
                        _messageElementJSONObjs = $.parseJSON(data.replace(/&quot;/g, '\"'));
                        LoadMessageElementListIntoTable();
                        break;
                    default:
                        DoMessageElementTransactionAjax("getmessageelementbyid", _selectedMessageCatalogId, null);
                        _selectedMessageElementId = -1;
                        toastr["success"]("[[[Action Completed]]]. (" + data + ")");
                        break;
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 401) {
                    toastr["error"]("[[[Session Expired. Please Re-Login]]].");
                    setTimeout(function () { sfBacktoHomeIndex(); }, 2000);
                }
                else
                    toastr["error"]("Error");
            }
        });
    }
    function checkPermission() {
        var piority = -1;
        for (var i in _permissions) {
            if (_permissions[i] == 0) {  //Admin
                piority = 2;
                break;
            }
            if (_permissions[i] == 42) {  //MsgElement View
                piority = 1;
            }
            if (_permissions[i] == 43) {  //MsgElement Edit
                piority = 2;
                break;
            }
        }
        if (piority == 1) {  //only View
            $('#DeleteMessageElementButton').css("display", "none");
            $('#UpdateMessageElementButton').css("display", "none");
            $('#AddNewMessageElementButton').css("display", "none");
        }

    }

    TableManageButtons.init();
    checkPermission();
    LoadMessageCatalogListIntoTable();

    $(document).ready(function () {
        var table = $('#datatable-responsive').DataTable();
        $('#datatable-responsive #MessageCatalogList').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            }
            else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
            OnSelectMessageCatalogItem(_messageCatalogJSONObjs[table.row(this).index()].Id, _messageCatalogJSONObjs[table.row(this).index()].ChildMessageFlag);
        });

        var eletable = $('#elementListTable').DataTable();
        $('#elementListTable #ElementList').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');

            }
            else {
                eletable.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
            OnSelectMessageElementItem(_messageElementJSONObjs[eletable.row(this).index()].Id);

        });

        $('#eleDataType').change(function () {
            if ($('#eleDataType').val() == "message")
                $('#childMessageBlock').css("display", "block");
            else $('#childMessageBlock').css("display", "none");
        });

        function dataValidation(postData) {
            var eleNameExp = /^[A-Za-z\d\s]+$/;
            var eleName = $("#eleName").val().replace(/\s/g, '');
            if (eleName.length == 0) {
                $("#eleName").focus();
                swal("[[[Invalid]]] !", "[[[Name is necessary]]].");
                return {
                    postData: postData,
                    isValidated: false
                };
            }
            if (eleName.length > 30) {
                $("#eleName").focus();
                swal("[[[Invalid]]] !", "Element Name must shorter than 30 characters.");
                return {
                    postData: postData,
                    isValidated: false
                };
            };
            if (!eleName.match(eleNameExp)) {
                $("#eleName").focus();
                swal("[[[Invalid]]] !", "Element Name can contain only letters and numbers character.");
                return {
                    postData: postData,
                    isValidated: false
                };
            }
            if (eleName.charCodeAt(0) >= 48 && eleName.charCodeAt(0) <= 57)
            {
                $("#eleName").focus();
                swal("[[[Invalid]]] !", "Element Name can't start from number.");
                return {
                    postData: postData,
                    isValidated: false
                };
            }

            postData.append('ElementName', eleName);
            $("#eleName").val(eleName);
            
            postData.append('ElementDataType', $("#eleDataType").val());
            postData.append('MandatoryFlag', $("#eleMandatory").val());
            postData.append('SFMandatoryFlag', false);
            postData.append('ShowOnEquipmentList', true);
            postData.append('ShowOnFactoryBoard', true);
            if ($("#eleDataType").val() == "message") postData.append('ChildMessageCatalogID', $("#eleChildMessage").val());
            else postData.append('ChildMessageCatalogID', _selectedMessageCatalogId);
            return {
                postData: postData,
                isValidated: true
            }
        }

        $('#AddNewMessageElementButton').click(function () {
            $('#panel_detail').css("display", "block");

            $('#EditingPanelTitle').html("[[[Add New]]] [[[MessageElement]]]");
            $('#DeleteMessageElementButton').css("display", "none");
            $('#UpdateMessageElementButton').css("display", "none");
            $('#CancelAddNewMessageElementButton').css("display", "inline");

            $('#SubmitNewMessageElementButton').css("display", "inline");

            $('#AddNewMessageElementButton').css("display", "none");
            CleanFormInput();
            $("#eleName").focus();
        });

        $('#CancelAddNewMessageElementButton').click(function () {
            $('#panel_detail').css("display", "none");
            $('#EditingPanelTitle').html("Detail");
            $('#DeleteMessageElementButton').css("display", "inline");
            $('#UpdateMessageElementButton').css("display", "inline");
            $('#CancelAddNewMessageElementButton').css("display", "none");
            $('#SubmitNewMessageElementButton').css("display", "none");

            $('#AddNewMessageElementButton').css("display", "inline");
            CleanFormInput();
            window.scrollTo(0, 0);
        });

        $('#SubmitNewMessageElementButton').click(function () {
            var postData = new FormData();
            var result = dataValidation(postData);

            if (result.isValidated) {
                swal({
                    title: "[[[Are you sure]]]?",
                    text: "",
                    type: "success",
                    showCancelButton: true,
                    confirmButtonClass: 'btn-success waves-effect waves-light',
                    confirmButtonText: '[[[Submit]]]!'
                }, function (isConfirm) {
                    if (isConfirm) {
                        DoMessageElementTransactionAjax("addmessageElement", -1, result.postData);

                        $('#panel_detail').css("display", "none");
                        $('#EditingPanelTitle').html("[[[Detail]]]");
                        $('#DeleteMessageElementButton').css("display", "inline");
                        $('#UpdateMessageElementButton').css("display", "inline");
                        $('#CancelAddNewMessageElementButton').css("display", "none");
                        $('#SubmitNewMessageElementButton').css("display", "none");

                        $('#AddNewMessageElementButton').css("display", "inline");

                        CleanFormInput();
                        window.scrollTo(0, 0);
                    }
                });
            }
        });

        $('#DeleteMessageElementButton').click(function () {
            if (_selectedMessageElementId < 0)
                toastr["error"]("[[[No Message Element Select]]].");
            else {
                swal({
                    title: "[[[Are you sure]]]?",
                    text: "",
                    type: "error",
                    showCancelButton: true,
                    confirmButtonClass: 'btn-danger waves-effect waves-light',
                    confirmButtonText: '[[[Delete]]]!'
                }, function (isConfirm) {
                    if (isConfirm) {
                        DoMessageElementTransactionAjax("deletemessageelement", _selectedMessageElementId, null);
                        CleanFormInput();
                        $('#panel_detail').css("display", "none");
                        window.scrollTo(0, 0);
                    }
                });
            }
        });

        $('#UpdateMessageElementButton').click(function () {
            if (_selectedMessageElementId < 0)
                toastr["error"]("[[[No Message Element Select]]].");
            else {
                var postData = new FormData();
                var result = dataValidation(postData);

                if(result.isValidated){
                    swal({
                        title: "[[[Are you sure]]]?",
                        text: "",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonClass: 'btn-warning waves-effect waves-light',
                        confirmButtonText: '[[[Update]]]!'
                    }, function (isConfirm) {
                        if (isConfirm) {
                            DoMessageElementTransactionAjax("updatemessageElement", _selectedMessageElementId, result.postData);
                            $('#panel_detail').css("display", "none");
                        }
                    });
                }
            }
        });
    });
</script>


